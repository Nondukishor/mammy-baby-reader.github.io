{"version":3,"sources":["style.module.scss","Modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ReadModal","show","alphabet","onHide","Modal","centered","Header","closeButton","Title","className","Body","Row","Col","xs","width","height","src","alt","style","fontSize","App","useState","setShow","name","color","backgroundColor","state","speak","useSpeechSynthesis","setAlphabet","handleRead","e","text","target","value","Container","fluid","fontWeight","map","a","index","key","xl","md","sm","Card","Alphabet","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.161848d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Alphabet\":\"style_Alphabet__3R4kB\"};","import React from \"react\";\nimport { Modal, Row, Col } from \"react-bootstrap\";\nconst ReadModal = ({ show, alphabet, onHide }) => {\n  return (\n    <Modal onHide={onHide} show={show} centered>\n      <Modal.Header closeButton>\n        <Modal.Title className=\"h2 text-success\">Mummy! I can read {alphabet}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col xs={6}><img width=\"200\" height=\"200\" src=\"https://media.giphy.com/media/8dYmJ6Buo3lYY/giphy.gif\" alt=\"baby\"/></Col>\n          <Col xs={6} className=\"text-center\">\n            <div className=\"d-flex justify-content-center align-items-center\">\n            <h2 className=\"text-danger\" style={{fontSize:'150px'}}>{alphabet}</h2></div></Col>\n        </Row>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default ReadModal;\n","import React, { Fragment,useState } from 'react';\nimport { Container,Row,Col, Card } from 'react-bootstrap';\nimport style from './style.module.scss';\nimport { useSpeechSynthesis } from 'react-speech-kit';\nimport ReadModal from './Modal';\n\nfunction App() {\n  const [show,setShow] = useState(false)\n  const [state] = useState(()=>[\n    {name:'A', color:'#FFE47A', backgroundColor:'#1CD8D2'},\n    {name:'B', color:'#FFE47A', backgroundColor:'#5C258D'},\n    {name:'c', color:'#FFE47A', backgroundColor:'#71B280'},\n    {name:'D', color:'#FFE47A', backgroundColor:'#134E5E'},\n    {name:'E', color:'#FFE47A', backgroundColor:'#EAECC6'},\n    {name:'F', color:'#FFE47A', backgroundColor:'#85D8CE'},\n    {name:'G', color:'#FFE47A', backgroundColor:'#4776E6'},\n    {name:'H', color:'#FFE47A', backgroundColor:'#8E54E9'},\n    {name:'I', color:'#FFE47A', backgroundColor:'#516395'},\n    {name:'J', color:'#FFE47A', backgroundColor:'#614385'},\n    {name:'K', color:'#FFE47A', backgroundColor:'#1F1C2C'},\n    {name:'M', color:'#FFE47A', backgroundColor:'#16222A'},\n    {name:'N', color:'#FFE47A', backgroundColor:'#EB3349'},\n    {name:'O', color:'#FFE47A', backgroundColor:'#DD5E89'},\n    {name:'P', color:'#FFE47A', backgroundColor:'#F7BB97'},\n    {name:'Q', color:'#FFE47A', backgroundColor:'#3CD3AD'},\n    {name:'R', color:'#FFE47A', backgroundColor:'#4CB8C4'},\n    {name:'S', color:'#FFE47A', backgroundColor:'#1D2B64'},\n    {name:'T', color:'#FFE47A', backgroundColor:'#FF512F'},\n    {name:'U', color:'#FFE47A', backgroundColor:'#61045F'},\n    {name:'V', color:'#FFE47A', backgroundColor:'#DD2476'},\n    {name:'W', color:'#FFE47A', backgroundColor:'#1a2a6c'},\n    {name:'X', color:'#FFE47A', backgroundColor:'#b21f1f'},\n    {name:'Y', color:'#FFE47A', backgroundColor:'#22c1c3'},\n    {name:'Z', color:'#FFE47A', backgroundColor:'#ff9966'},\n  ])\n\n  const { speak } = useSpeechSynthesis();\n  const [alphabet,setAlphabet]= useState('')\n\n  const handleRead =(e)=>{\n    speak({text:e.target.value})\n    setAlphabet(e.target.value)\n    setShow(true)\n  }\n  \n  return (\n   <Fragment>\n     <Container fluid={true}>\n       <Row>\n         <Col>\n         <div className=\"mt-5 pt-5 h1 text-center jumbotron bg-warning d-block\" style={{fontWeight:'bold'}}>\n             Mummy's Baby Reader\n         <div>\n           <img src={'https://media.giphy.com/media/eFAFV2ytLzBba/giphy.gif'} alt=\"cover\" height=\"300\" width=\"300\"/>\n         </div>\n       </div>\n         </Col>\n       </Row>\n        \n       <Row>\n      \n          {\n            state.map((a,index)=>{\n              return(\n                <Col key={index} xl={2} md={2} sm={2} className=\"p-2\">\n                  <Card style={{color:a.color,backgroundColor:a.backgroundColor}}>\n                  <div  className={style.Alphabet}>{a.name}</div>\n                  <button  value={a.name} onClick={handleRead} className=\"btn btn-sm btn-success btn-block\">Read Me</button>\n                  </Card>\n               </Col>\n              )\n            })\n          }\n\n          <ReadModal \n          onHide={() => setShow(false)}\n          show={show} \n          alphabet={alphabet}\n          />\n       </Row>\n     </Container>\n   </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}